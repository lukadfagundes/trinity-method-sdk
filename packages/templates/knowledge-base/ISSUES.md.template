# ISSUES.md - {{PROJECT_NAME}}
**Trinity Method v7.0 - Issue Intelligence System**
**Technology Stack**: {{TECHNOLOGY_STACK}}
**Framework**: {{PRIMARY_FRAMEWORK}}
**Last Updated**: {{CURRENT_DATE}}

---

## üî¥ ACTIVE ISSUES

### Critical (P0) - Immediate Action Required
```yaml
Issue_ID: {{PROJECT_PREFIX}}-C001
Title: {{CRITICAL_ISSUE_TITLE}}
Component: {{AFFECTED_COMPONENT}}
Impact: {{IMPACT_DESCRIPTION}}
Status: ACTIVE
First_Seen: {{DATE}}
Last_Seen: {{DATE}}
Occurrences: {{COUNT}}

Symptoms:
  - {{SYMPTOM_1}}
  - {{SYMPTOM_2}}

Root_Cause: {{ROOT_CAUSE}}

Investigation_Path:
  1. {{INVESTIGATION_STEP_1}}
  2. {{INVESTIGATION_STEP_2}}
  3. {{INVESTIGATION_STEP_3}}

Solution:
  ```{{LANGUAGE}}
  {{SOLUTION_CODE}}
  ```

Prevention:
  - {{PREVENTION_1}}
  - {{PREVENTION_2}}
```

### High Priority (P1) - Core Functionality
[High priority issues affecting core features]

### Medium Priority (P2) - User Experience
[Issues affecting user experience but not blocking]

### Low Priority (P3) - Enhancements
[Minor issues and improvement opportunities]

---

## üìä {{FRAMEWORK}}-SPECIFIC PATTERNS

### Common {{FRAMEWORK}} Issues

#### Pattern: {{FRAMEWORK_PATTERN_1}}
**Frequency**: HIGH
**Impact**: Performance/Functionality/Security
**Category**: {{CATEGORY}}

**Problem Description**:
{{PROBLEM_DESCRIPTION}}

**Typical Symptoms**:
1. {{SYMPTOM_1}}
2. {{SYMPTOM_2}}
3. {{SYMPTOM_3}}

**Investigation Approach**:
```bash
# {{FRAMEWORK}} specific investigation
{{INVESTIGATION_COMMANDS}}
```

**Known Solutions**:
```{{LANGUAGE}}
// {{FRAMEWORK}} specific solution
{{SOLUTION_PATTERN}}
```

**Prevention Measures**:
- {{PREVENTION_MEASURE_1}}
- {{PREVENTION_MEASURE_2}}
- {{PREVENTION_MEASURE_3}}

**Related Issues**: [{{RELATED_ISSUE_IDS}}]

---

## üåç UNIVERSAL DEVELOPMENT PATTERNS

### State Management Issues

#### Pattern: State Synchronization Failure
**Frequency**: MEDIUM
**Impact**: Data Integrity
**Applicable To**: All frameworks with state management

**Problem**: State becomes out of sync between components
**Root Causes**:
1. Race conditions in async operations
2. Improper state mutation
3. Missing state update propagation

**Universal Solution Pattern**:
```{{LANGUAGE}}
// State synchronization pattern
{{STATE_SYNC_PATTERN}}
```

### Performance Optimization Patterns

#### Pattern: Render Performance Degradation
**Frequency**: HIGH
**Impact**: User Experience

**Detection**:
```javascript
// Performance monitoring
const performanceMonitor = {
  measureRender: (component) => {
    const startTime = performance.now();
    // Render logic
    const endTime = performance.now();
    if (endTime - startTime > THRESHOLD) {
      console.warn(`Slow render: ${component}`);
    }
  }
};
```

### Security Patterns

#### Pattern: Input Validation Bypass
**Frequency**: MEDIUM
**Impact**: CRITICAL

**Prevention Strategy**:
```{{LANGUAGE}}
// Input validation pattern
{{VALIDATION_PATTERN}}
```

---

## üî¨ TRINITY METHOD PATTERNS

### Investigation Protocol Issues

#### Pattern: Investigation Scope Creep
**Frequency**: HIGH
**Impact**: Development Velocity

**Problem**: Investigations expand beyond intended scope
**Solution**:
1. Set strict time boxes (30 min max)
2. Document tangential findings separately
3. Create follow-up investigations

### Knowledge Capture Issues

#### Pattern: Pattern Documentation Lag
**Frequency**: MEDIUM
**Impact**: Knowledge Reuse

**Problem**: Patterns discovered but not documented immediately
**Solution**:
- Document patterns within the same session
- Use pattern template immediately
- Link to investigation that discovered it

---

## üìà ISSUE METRICS

### Pattern Recognition Statistics
```yaml
Total_Patterns_Identified: {{COUNT}}
Patterns_This_Month: {{COUNT}}
Most_Frequent_Pattern: {{PATTERN_NAME}}
Success_Rate: {{PERCENTAGE}}%

By_Category:
  Performance: {{COUNT}}
  Security: {{COUNT}}
  State_Management: {{COUNT}}
  Integration: {{COUNT}}
  UI_UX: {{COUNT}}
```

### Issue Resolution Metrics
```yaml
Average_Resolution_Time:
  P0_Critical: {{TIME}}
  P1_High: {{TIME}}
  P2_Medium: {{TIME}}
  P3_Low: {{TIME}}

First_Time_Fix_Rate: {{PERCENTAGE}}%
Regression_Rate: {{PERCENTAGE}}%
Pattern_Prevention_Rate: {{PERCENTAGE}}%
```

### Recurrence Tracking
| Issue Pattern | First Seen | Last Seen | Occurrences | Status |
|--------------|------------|-----------|-------------|---------|
| {{PATTERN_1}} | {{DATE}} | {{DATE}} | {{COUNT}} | {{STATUS}} |
| {{PATTERN_2}} | {{DATE}} | {{DATE}} | {{COUNT}} | {{STATUS}} |

---

## üõ†Ô∏è INVESTIGATION QUEUE

### Pending Investigations
1. **{{INVESTIGATION_1}}**
   - Scope: {{SCOPE}}
   - Estimated Time: {{TIME}}
   - Dependencies: {{DEPENDENCIES}}

2. **{{INVESTIGATION_2}}**
   - Scope: {{SCOPE}}
   - Estimated Time: {{TIME}}
   - Dependencies: {{DEPENDENCIES}}

### Completed Investigations (This Session)
- [x] {{COMPLETED_1}} - See: trinity/investigations/{{DATE}}-{{INVESTIGATION}}.md
- [x] {{COMPLETED_2}} - See: trinity/investigations/{{DATE}}-{{INVESTIGATION}}.md

---

## üîÑ ISSUE LIFECYCLE

### Issue States
```mermaid
graph LR
    A[Discovered] --> B[Investigated]
    B --> C[Documented]
    C --> D[Solution Implemented]
    D --> E[Verified]
    E --> F[Pattern Extracted]
    F --> G[Closed]
```

### State Definitions
1. **Discovered**: Issue identified but not investigated
2. **Investigated**: Root cause analysis complete
3. **Documented**: Full documentation in ISSUES.md
4. **Solution Implemented**: Fix applied to codebase
5. **Verified**: Fix confirmed working
6. **Pattern Extracted**: Reusable pattern documented
7. **Closed**: Issue resolved and knowledge captured

---

## üìù ISSUE TEMPLATE

```yaml
Issue_ID: {{PROJECT_PREFIX}}-{{CATEGORY}}{{NUMBER}}
Title: {{DESCRIPTIVE_TITLE}}
Component: {{AFFECTED_COMPONENT}}
Framework_Specific: {{YES/NO}}
Impact: {{CRITICAL/HIGH/MEDIUM/LOW}}
Status: {{ACTIVE/INVESTIGATING/RESOLVED}}

Discovery:
  Date: {{DATE}}
  Discovered_By: {{METHOD/PERSON}}
  Session: {{SESSION_ID}}

Symptoms:
  - {{SYMPTOM_1}}
  - {{SYMPTOM_2}}

Root_Cause_Analysis:
  Investigation_Time: {{MINUTES}}
  Root_Cause: {{DESCRIPTION}}
  Contributing_Factors: [{{LIST}}]

Solution:
  Implementation_Time: {{MINUTES}}
  Code_Changes: {{FILES_CHANGED}}
  Tests_Added: {{TEST_COUNT}}

Prevention:
  Pattern_Created: {{YES/NO}}
  Pattern_Location: trinity/patterns/{{PATTERN_FILE}}
  Guidelines_Updated: {{YES/NO}}

Metrics:
  Recurrence_Risk: {{HIGH/MEDIUM/LOW}}
  Similar_Issues_Prevented: {{COUNT}}
```

---

## üéØ PREVENTION STRATEGIES

### Proactive Measures by Category

#### Performance Issues
1. Implement performance monitoring from start
2. Set up automated performance testing
3. Regular performance audits

#### State Management Issues
1. Define clear state ownership
2. Implement state validation
3. Use immutable state patterns

#### Security Issues
1. Input validation on all boundaries
2. Regular security scanning
3. Security review checklist

#### Integration Issues
1. Contract testing between components
2. Mock external dependencies
3. Integration test suite

---

## üìä WEEKLY ISSUE REVIEW

### Issues This Week
- **New Issues**: {{COUNT}}
- **Resolved Issues**: {{COUNT}}
- **Patterns Discovered**: {{COUNT}}
- **Investigations Completed**: {{COUNT}}

### Trending Patterns
1. {{TRENDING_PATTERN_1}} - {{OCCURRENCE_INCREASE}}%
2. {{TRENDING_PATTERN_2}} - {{OCCURRENCE_INCREASE}}%

### Action Items
- [ ] Investigate {{HIGH_PRIORITY_PATTERN}}
- [ ] Document {{UNDOCUMENTED_PATTERN}}
- [ ] Implement prevention for {{RECURRING_ISSUE}}

---

## üîó RELATED DOCUMENTS

- **Technical-Debt.md**: Detailed debt tracking
- **ARCHITECTURE.md**: System design and components
- **Trinity.md**: Methodology implementation
- **To-do.md**: Pending fixes and improvements
- **Pattern Library**: trinity/patterns/

---

*Issue tracking powered by Trinity Method v7.0*
*Continuous pattern recognition and prevention system*