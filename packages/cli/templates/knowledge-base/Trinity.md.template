# Trinity Method Implementation - {{PROJECT_NAME}}
**Version**: 7.0
**Technology Stack**: {{TECHNOLOGY_STACK}}
**Framework**: {{PRIMARY_FRAMEWORK}}
**Last Updated**: {{CURRENT_DATE}}

---

## PROJECT-SPECIFIC TRINITY PROTOCOLS

### {{FRAMEWORK}} Investigation Procedures

#### Pre-Implementation Investigation
Every feature/fix in {{PROJECT_NAME}} requires investigation:

1. **Scope Definition** (5 minutes)
   ```yaml
   Investigation_Scope:
     Feature: {{FEATURE_NAME}}
     Components_Affected: [List components]
     Success_Criteria: [Define clear criteria]
     Time_Box: 30 minutes maximum
   ```

2. **{{FRAMEWORK}}-Specific Analysis** (15 minutes)
   - Component dependencies in {{FRAMEWORK}}
   - State management implications
   - Performance impact assessment
   - Security considerations

3. **Pattern Discovery** (5 minutes)
   - Check trinity/patterns/ for existing solutions
   - Document new patterns if discovered
   - Update pattern library

4. **Documentation** (5 minutes)
   - Save to trinity/investigations/[date]-[feature].md
   - Update relevant knowledge base files
   - Link to issues if applicable

---

## {{PROJECT_NAME}} DEBUGGING STANDARDS

### Mandatory Debug Implementation

#### {{LANGUAGE}} Debug Pattern
```{{LANGUAGE}}
{{DEBUG_ENTRY_PATTERN}}

// Function logic here

{{DEBUG_EXIT_PATTERN}}
```

#### Framework-Specific Debug Points
1. **Component Lifecycle** ({{FRAMEWORK}}):
   {{LIFECYCLE_DEBUG_POINTS}}

2. **State Changes**:
   {{STATE_DEBUG_POINTS}}

3. **API Calls**:
   {{API_DEBUG_POINTS}}

4. **Error Boundaries**:
   {{ERROR_DEBUG_POINTS}}

### Debug Levels
```yaml
Debug_Levels:
  VERBOSE: All entry/exit points
  INFO: Key operations only
  WARN: Potential issues
  ERROR: Failures only
  SILENT: Production mode
```

---

## PERFORMANCE STANDARDS

### {{PROJECT_NAME}} Performance Baselines

| Metric | Target | Warning | Critical | {{FRAMEWORK}} Notes |
|--------|--------|---------|----------|---------------------|
| Initial Load | <{{LOAD_TARGET}}ms | >{{LOAD_WARNING}}ms | >{{LOAD_CRITICAL}}ms | {{LOAD_NOTES}} |
| Interaction | <{{INTERACTION_TARGET}}ms | >{{INTERACTION_WARNING}}ms | >{{INTERACTION_CRITICAL}}ms | {{INTERACTION_NOTES}} |
| API Response | <{{API_TARGET}}ms | >{{API_WARNING}}ms | >{{API_CRITICAL}}ms | {{API_NOTES}} |
| Memory Usage | <{{MEMORY_TARGET}}MB | >{{MEMORY_WARNING}}MB | >{{MEMORY_CRITICAL}}MB | {{MEMORY_NOTES}} |
| Bundle Size | <{{BUNDLE_TARGET}}KB | >{{BUNDLE_WARNING}}KB | >{{BUNDLE_CRITICAL}}KB | {{BUNDLE_NOTES}} |

### Performance Monitoring
```{{LANGUAGE}}
// Performance monitoring wrapper
{{PERFORMANCE_MONITORING_PATTERN}}
```

---

## QUALITY GATES

### Pre-Implementation Checklist
- [ ] Investigation completed
- [ ] Existing patterns reviewed (trinity/patterns/)
- [ ] Performance impact assessed
- [ ] Security implications considered
- [ ] Test plan created
- [ ] Documentation plan defined

### Pre-Commit Checklist
- [ ] All tests passing
- [ ] Debug logging implemented
- [ ] Performance baselines met
- [ ] No console errors
- [ ] Code review completed
- [ ] Documentation updated

### Pre-Deploy Checklist
- [ ] Integration tests passing
- [ ] Performance tests passing
- [ ] Security scan clean
- [ ] Rollback plan defined
- [ ] Monitoring configured
- [ ] Team notified

---

## CRISIS MANAGEMENT PROTOCOLS

### {{FRAMEWORK}}-Specific Crisis Indicators

#### Console Error Crisis
**Trigger**: >{{ERROR_THRESHOLD}} console errors
```bash
# Immediate response
trinity crisis console-errors

# Actions:
1. Screenshot all errors
2. Enable verbose debugging
3. Trace error sources
4. Document in ISSUES.md
5. Implement fixes with full debugging
```

#### Performance Crisis
**Trigger**: Performance degradation >{{PERF_DEGRADATION_THRESHOLD}}%
```bash
# Immediate response
trinity crisis performance

# Actions:
1. Profile current performance
2. Compare with baselines
3. Identify bottlenecks
4. Document in Technical-Debt.md
5. Implement optimizations
```

#### Security Crisis
**Trigger**: Security vulnerability discovered
```bash
# Immediate response
trinity crisis security

# Actions:
1. Isolate vulnerability
2. Assess impact scope
3. Implement immediate patch
4. Full security audit
5. Update security protocols
```

#### Data Integrity Crisis
**Trigger**: Data inconsistency detected
```bash
# Immediate response
trinity crisis data-integrity

# Actions:
1. Halt write operations
2. Backup current state
3. Audit data sources
4. Identify corruption point
5. Restore integrity
```

---

## SESSION WORKFLOW

### Session Initialization Protocol
```yaml
Session_Start:
  1_Load_Context:
    - Read CLAUDE.md hierarchy
    - Review To-do.md
    - Check Technical-Debt.md
    - Load recent investigations

  2_Health_Check:
    - Run test suite
    - Check build system
    - Verify dependencies
    - Check performance baselines

  3_Session_Setup:
    - Create session folder
    - Initialize session log
    - Set session goals
    - Start time tracking
```

### Session Work Protocol
```yaml
Session_Work:
  Investigation_First:
    - Always investigate before implementing
    - Document findings
    - Check for patterns

  Implementation:
    - Follow {{FRAMEWORK}} best practices
    - Implement debugging
    - Write tests alongside code
    - Monitor performance

  Validation:
    - Run tests frequently
    - Check performance impact
    - Verify no console errors
```

### Session Completion Protocol
```yaml
Session_End:
  1_Documentation:
    - Update ARCHITECTURE.md
    - Update To-do.md
    - Document issues in ISSUES.md
    - Archive investigations

  2_Knowledge_Capture:
    - Save new patterns
    - Update Technical-Debt.md
    - Record decisions
    - Update metrics

  3_Archive:
    - Move to trinity/sessions/[date]/
    - Create session summary
    - Update project metrics
    - Plan next session
```

---

## PATTERN LIBRARY INTEGRATION

### Pattern Discovery Process
1. **Identify**: Recognize recurring solutions
2. **Document**: Create pattern file in trinity/patterns/
3. **Validate**: Test pattern effectiveness
4. **Share**: Update pattern index
5. **Reuse**: Apply in future implementations

### Pattern Template
```markdown
# Pattern: {{PATTERN_NAME}}
**Category**: {{CATEGORY}}
**Framework**: {{FRAMEWORK}}
**Frequency**: {{FREQUENCY}}

## Problem
{{PROBLEM_DESCRIPTION}}

## Solution
\```{{LANGUAGE}}
{{SOLUTION_CODE}}
\```

## Usage
{{USAGE_INSTRUCTIONS}}

## Trade-offs
{{TRADE_OFFS}}
```

---

## SUCCESS METRICS

### Trinity Method Metrics
```javascript
const trinityMetrics = {
  // Investigation effectiveness
  investigationSuccessRate: 0,      // Issues prevented by investigation
  averageInvestigationTime: 0,      // Minutes per investigation

  // Pattern library growth
  patternsDiscovered: 0,            // New patterns this period
  patternReuseRate: 0,              // Patterns reused vs created

  // Issue prevention
  issuesPreventedByPatterns: 0,     // Issues avoided through patterns
  issueRecurrenceRate: 0,           // Issues that reappear

  // Quality metrics
  firstTimeFixRate: 0,              // Fixes that work first time
  qualityGatePassRate: 0,           // Commits passing all gates

  // Performance maintenance
  performanceRegressions: 0,        // Times performance degraded
  performanceImprovements: 0,       // Times performance improved

  // Crisis management
  crisisesAvoided: 0,               // Crises prevented by protocols
  crisisResolutionTime: 0,          // Average crisis resolution time
};
```

### Reporting Schedule
- **Daily**: Update session metrics
- **Weekly**: Review success metrics
- **Monthly**: Full Trinity Method audit

---

## CONTINUOUS IMPROVEMENT

### Methodology Evolution
1. **Feedback Loop**: Collect team feedback weekly
2. **Pattern Analysis**: Review pattern effectiveness monthly
3. **Process Refinement**: Update protocols based on learnings
4. **Tool Enhancement**: Improve tooling and automation

### Knowledge Growth Strategy
- Document every investigation
- Capture every pattern
- Track every issue resolution
- Archive every session

---

## TEAM PROTOCOLS

### Role Definitions
- **TRINITY CTO**: Methodology enforcement and evolution
- **Developers**: Investigation-first implementation
- **Reviewers**: Quality gate verification

### Communication Standards
- Investigation findings shared immediately
- Patterns documented within session
- Issues reported as discovered
- Metrics reviewed weekly

---

## TECHNOLOGY-SPECIFIC ADAPTATIONS

### {{FRAMEWORK}} Specific Rules
{{FRAMEWORK_SPECIFIC_RULES}}

### {{LANGUAGE}} Specific Patterns
{{LANGUAGE_SPECIFIC_PATTERNS}}

### {{PROJECT_NAME}} Custom Protocols
{{CUSTOM_PROTOCOLS}}

---

*Trinity Method implementation specific to {{PROJECT_NAME}}*
*Continuously evolved based on project learnings*