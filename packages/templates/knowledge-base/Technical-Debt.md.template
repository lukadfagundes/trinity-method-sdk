# Technical Debt Tracking - {{PROJECT_NAME}}
**Trinity Method v7.0**
**Technology Stack**: {{TECHNOLOGY_STACK}}
**Framework**: {{PRIMARY_FRAMEWORK}}
**Last Updated**: {{CURRENT_DATE}}

---

## üìä DEBT METRICS DASHBOARD

### Current Baseline Metrics
```yaml
Technical_Debt_Metrics:
  Code_Quality:
    TODO_Comments: {{TODO_COUNT}}
    FIXME_Comments: {{FIXME_COUNT}}
    HACK_Comments: {{HACK_COUNT}}
    Console_Statements: {{CONSOLE_COUNT}}
    Commented_Code_Blocks: {{COMMENTED_BLOCKS}}

  File_Complexity:
    Files_Over_500_Lines: {{FILES_500}}
    Files_Over_1000_Lines: {{FILES_1000}}
    Files_Over_3000_Lines: {{FILES_3000}}
    Average_File_Length: {{AVG_LENGTH}}

  Test_Coverage:
    Overall_Coverage: {{OVERALL_COVERAGE}}%
    Unit_Test_Coverage: {{UNIT_COVERAGE}}%
    Integration_Coverage: {{INTEGRATION_COVERAGE}}%
    Untested_Components: {{UNTESTED_COUNT}}

  {{FRAMEWORK}}_Specific:
    Deprecated_APIs: {{DEPRECATED_COUNT}}
    Anti_Patterns: {{ANTIPATTERN_COUNT}}
    Performance_Issues: {{PERF_ISSUE_COUNT}}
    Security_Warnings: {{SECURITY_COUNT}}
```

### Trend Analysis
```yaml
Session_Comparison:
  Previous_Session:
    Date: {{PREV_DATE}}
    Total_Debt_Score: {{PREV_SCORE}}
    Critical_Items: {{PREV_CRITICAL}}

  Current_Session:
    Date: {{CURR_DATE}}
    Total_Debt_Score: {{CURR_SCORE}}
    Critical_Items: {{CURR_CRITICAL}}

  Delta:
    Score_Change: {{SCORE_DELTA}}
    Trend: {{IMPROVING/DEGRADING/STABLE}}
    Velocity: {{ITEMS_RESOLVED}}/session
```

---

## üîç PATTERN LIBRARY

### Recurring Technical Debt Patterns

#### Pattern: {{PATTERN_NAME_1}}
**Frequency**: Found in {{COUNT}} files
**Category**: {{CATEGORY}}
**Impact**: {{HIGH/MEDIUM/LOW}}
**Debt Score**: {{SCORE}}/10

**Files Affected**:
```
{{FILE_1}}:{{LINE_NUMBERS}}
{{FILE_2}}:{{LINE_NUMBERS}}
{{FILE_3}}:{{LINE_NUMBERS}}
```

**Pattern Description**:
{{PATTERN_DESCRIPTION}}

**Root Cause**:
{{ROOT_CAUSE}}

**Refactoring Template**:
```{{LANGUAGE}}
// Current (problematic) pattern
{{CURRENT_CODE}}

// Refactored solution
{{REFACTORED_CODE}}
```

**Impact Analysis**:
- **If Fixed**: Resolves {{COUNT}} issues across {{FILE_COUNT}} files
- **If Ignored**: Technical debt compounds by {{PERCENTAGE}}% per month
- **Effort Required**: {{HOURS}} hours
- **ROI**: {{HIGH/MEDIUM/LOW}}

---

## üìà ROOT CAUSE ANALYSIS

### High-Impact Root Causes

#### Root Cause: {{ROOT_CAUSE_1}}
**Impact Multiplier**: 1:{{MULTIPLIER}} (1 fix resolves {{MULTIPLIER}} symptoms)
**Debt Category**: {{CATEGORY}}
**Priority**: {{CRITICAL/HIGH/MEDIUM/LOW}}

**Affected Areas**:
1. **{{COMPONENT_1}}**: {{ISSUE_COUNT}} issues
2. **{{COMPONENT_2}}**: {{ISSUE_COUNT}} issues
3. **{{COMPONENT_3}}**: {{ISSUE_COUNT}} issues

**Symptoms Caused**:
- {{SYMPTOM_1}}
- {{SYMPTOM_2}}
- {{SYMPTOM_3}}

**Resolution Strategy**:
```yaml
Phase_1_Quick_Wins:
  - {{QUICK_FIX_1}}
  - {{QUICK_FIX_2}}
  Time: {{HOURS}} hours

Phase_2_Refactoring:
  - {{REFACTOR_1}}
  - {{REFACTOR_2}}
  Time: {{DAYS}} days

Phase_3_Prevention:
  - {{PREVENTION_1}}
  - {{PREVENTION_2}}
  Time: Ongoing
```

---

## üìù TODO/FIXME/HACK INVENTORY

### Critical (Security/Stability) - P0
```yaml
- File: {{FILE_PATH}}
  Line: {{LINE}}
  Type: {{TODO/FIXME/HACK}}
  Content: "{{COMMENT_TEXT}}"
  Impact: {{IMPACT_DESCRIPTION}}
  Risk: CRITICAL
  Resolution: {{RESOLUTION_PLAN}}
```

### High Priority (Performance/Quality) - P1
[High priority technical debt items]

### Medium Priority (Maintainability) - P2
[Medium priority improvements]

### Low Priority (Nice to Have) - P3
[Low priority enhancements]

---

## üìè COMPLEXITY ANALYSIS

### Files Exceeding Complexity Thresholds

#### Critical - Files Over 3000 Lines
```yaml
{{LARGE_FILE_1}}:
  Lines: {{LINE_COUNT}}
  Complexity_Score: {{COMPLEXITY}}
  Components: {{COMPONENT_COUNT}}
  Refactor_Strategy:
    - Split into {{SUGGESTED_FILES}}
    - Extract {{EXTRACTABLE_COMPONENTS}}
    - Estimated_Effort: {{HOURS}} hours
```

#### Warning - Files Over 1000 Lines
[Files that should be monitored and potentially refactored]

#### Watch - Files Over 500 Lines
[Files to watch for growing complexity]

### Cyclomatic Complexity
| File | Function | Complexity | Risk Level |
|------|----------|------------|------------|
| {{FILE}} | {{FUNCTION}} | {{SCORE}} | {{RISK}} |

---

## üß™ TEST COVERAGE GAPS

### Components Without Tests
```yaml
Critical_Untested:
  {{COMPONENT_1}}:
    Type: {{TYPE}}
    Risk: CRITICAL
    Functions: {{COUNT}}
    Test_Effort: {{HOURS}} hours
    Scope: COMPREHENSIVE
```

### Components With Insufficient Tests
```yaml
{{COMPONENT_NAME}}:
  Current_Coverage: {{PERCENTAGE}}%
  Target_Coverage: {{TARGET}}%
  Gap: {{GAP}}%
  Critical_Paths_Untested: [{{PATH_LIST}}]
  Missing_Test_Types: [unit/integration/e2e]
```

### Test Debt Score
```javascript
const testDebtScore = {
  untested_components: {{COUNT}},
  insufficient_coverage: {{COUNT}},
  missing_edge_cases: {{COUNT}},
  no_integration_tests: {{COUNT}},
  total_debt_score: {{SCORE}}/100
};
```

---

## üîí SECURITY DEBT

### Security Warnings and Suppressions
```yaml
Security_Debt:
  Suppressed_Warnings: {{COUNT}}
  Vulnerable_Dependencies: {{COUNT}}
  Unvalidated_Inputs: {{COUNT}}
  Exposed_Secrets_Risk: {{COUNT}}
  Missing_Security_Headers: {{COUNT}}
```

### Security Debt Items
```yaml
- Type: {{SECURITY_ISSUE_TYPE}}
  Location: {{FILE}}:{{LINE}}
  Severity: {{CRITICAL/HIGH/MEDIUM/LOW}}
  Description: {{DESCRIPTION}}
  Fix: {{FIX_DESCRIPTION}}
  Effort: {{HOURS}} hours
```

---

## ‚ö° PERFORMANCE DEBT

### Performance Bottlenecks
```yaml
{{BOTTLENECK_1}}:
  Type: {{TYPE}}
  Impact: {{MILLISECONDS}}ms delay
  Frequency: {{CALLS_PER_MINUTE}}
  Total_Impact: {{TOTAL_MS}}ms/min
  Fix_Strategy: {{STRATEGY}}
  Effort: {{HOURS}} hours
```

### Optimization Opportunities
1. **{{OPTIMIZATION_1}}**: Save {{MS}}ms per operation
2. **{{OPTIMIZATION_2}}**: Reduce memory by {{MB}}MB
3. **{{OPTIMIZATION_3}}**: Decrease bundle by {{KB}}KB

---

## üîÑ DEBT REDUCTION PLAN

### Sprint Planning - Next Session Priorities
```yaml
Priority_1_Quick_Wins:
  - Task: {{TASK}}
    Impact: Fixes {{COUNT}} issues
    Effort: {{HOURS}} hours
    ROI: {{HIGH/MEDIUM/LOW}}
```

### Quarter Planning - Strategic Improvements
```yaml
Q1_Goals:
  - Reduce_TODO_Count: {{PERCENTAGE}}%
  - Increase_Coverage: {{PERCENTAGE}}%
  - Refactor_Large_Files: {{COUNT}} files
  - Fix_Security_Issues: ALL critical
```

### Automation Opportunities
```yaml
Automatable_Fixes:
  - Pattern: {{PATTERN}}
    Files_Affected: {{COUNT}}
    Automation_Method: {{METHOD}}
    Time_Saved: {{HOURS}} hours
```

---

## üìã SESSION DEBT TRACKING

### Added This Session
```yaml
New_Debt:
  TODOs_Added: {{COUNT}}
  FIXMEs_Added: {{COUNT}}
  Coverage_Decreased: {{PERCENTAGE}}%
  Files_Grew_Large: {{COUNT}}
  New_Suppressions: {{COUNT}}
```

### Resolved This Session
```yaml
Debt_Resolved:
  TODOs_Fixed: {{COUNT}}
  FIXMEs_Resolved: {{COUNT}}
  Coverage_Increased: {{PERCENTAGE}}%
  Files_Refactored: {{COUNT}}
  Suppressions_Removed: {{COUNT}}
```

### Net Change
```yaml
Session_Summary:
  Overall_Debt_Score: {{IMPROVED/DEGRADED}} by {{POINTS}}
  Trend: {{POSITIVE/NEGATIVE/NEUTRAL}}
  Velocity: {{ITEMS_PER_SESSION}} items/session
  Projected_Sessions_To_Target: {{COUNT}}
```

---

## üéØ SUCCESS METRICS & GOALS

### Short-term Goals (Next 3 Sessions)
```yaml
Immediate_Targets:
  TODO_Reduction: <{{TARGET}} (from {{CURRENT}})
  Test_Coverage: >{{TARGET}}% (from {{CURRENT}}%)
  Large_Files: <{{TARGET}} (from {{CURRENT}})
  Critical_Security: 0 (from {{CURRENT}})
```

### Long-term Goals (Next Quarter)
```yaml
Strategic_Targets:
  Overall_Debt_Score: <{{TARGET}}/100
  Test_Coverage: >{{TARGET}}%
  Code_Quality_Score: >{{TARGET}}/10
  Performance_Score: >{{TARGET}}/10
  Security_Score: {{TARGET}}/10
```

### Progress Tracking
```javascript
const debtReductionVelocity = {
  current_velocity: {{ITEMS_PER_SESSION}},
  required_velocity: {{REQUIRED_ITEMS}},
  acceleration_needed: {{PERCENTAGE}}%,
  sessions_to_goal: {{COUNT}},
  on_track: {{true/false}}
};
```

---

## üìà DEBT SCORING ALGORITHM

### Debt Score Calculation
```javascript
const calculateDebtScore = () => {
  const weights = {
    todos: 1,
    fixmes: 2,
    hacks: 3,
    untested: 5,
    large_files: 3,
    security: 10,
    performance: 4
  };

  return {
    code_quality_score: {{SCORE}},
    test_coverage_score: {{SCORE}},
    security_score: {{SCORE}},
    performance_score: {{SCORE}},
    maintainability_score: {{SCORE}},
    total_debt_score: {{TOTAL_SCORE}}
  };
};
```

---

## üîó RELATED DOCUMENTS

- **ISSUES.md**: Active issues and patterns
- **ARCHITECTURE.md**: System design decisions
- **Trinity.md**: Methodology implementation
- **To-do.md**: Actionable task list
- **Pattern Library**: trinity/patterns/

---

*Technical Debt tracking powered by Trinity Method v7.0*
*Continuous monitoring and reduction system*